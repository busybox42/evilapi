const fs = require("fs");

// Main configuration object
const config = {
  // Server configuration
  server: {
    port: process.env.PORT || 3011,
    hostname: "localhost",
    url: "http://localhost:8080",
  },

  webServer: {
    enabled: true,
    webHost: process.env.WEB_SERVER_HOST || "http://localhost",
    webPort: process.env.WEB_SERVER_PORT || 8080,
  },

  // SSL configuration
  ssl: {
    enabled: false, // SSL enabled status
    keyPath: "/opt/evilcrypt/ssl/some-website.tld.key",
    certPath: "/opt/evilcrypt/ssl/some-website.tld.crt",
    caPath: "/opt/evilcrypt/ssl/some-website.tld.ca",
  },

  // PGP key configuration
  pgpKeys: [
    {
      type: "General",
      email: "somedude@some-website.tld",
      passphrase: "SuperSecretPassword",
    },
    {
      type: "Evil",
      email: "somedude@some-website.tld",
      passphrase: "SuperEvilPassword",
    },
  ],

  // File and message size limits
  limits: {
    fileSize: 100 * 1024 * 1024, // Max file size (100 MB)
    messageSize: 100 * 1024 * 1024, // Max message size (100 MB)
  },

  // Memcached configuration
  memcached: {
    host: "localhost",
    port: 11211,
  },

  rateLimitConfig: {
    windowMs: 15 * 60 * 1000, // 15 minutes
    max: 200, // Max requests per IP
    message: 'Too many requests from this IP, please try again later.',
  },

  ipAccessControlConfig: {
    whitelist: ['172.17.0.1', '127.0.0.1', '::1'],
    blacklist: [],
  },  
};

// Load SSL files if SSL is enabled
if (config.ssl.enabled) {
  config.ssl.key = fs.readFileSync(config.ssl.keyPath);
  config.ssl.cert = fs.readFileSync(config.ssl.certPath);
  config.ssl.ca = fs.readFileSync(config.ssl.caPath);
}

module.exports = config;
